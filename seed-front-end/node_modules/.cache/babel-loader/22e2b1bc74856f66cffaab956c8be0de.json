{"ast":null,"code":"var _jsxFileName = \"/Users/joshstroud/Desktop/react/cise-seeds/seed-front-end/src/BasicTable.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$(),\n    _s6 = $RefreshSig$();\n\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport { useTable, useFilters, useGlobalFilter, useAsyncDebounce } from \"react-table\"; // A great library for fuzzy filtering/sorting items\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Styles = styled.div`\n  padding: 1rem;\n  table {\n    border-spacing: 0;\n    border: 1px solid black;\n    tr {\n      :last-child {\n        td {\n          border-bottom: 0;\n        }\n      }\n    }\n    th,\n    td {\n      margin: 0;\n      padding: 0.5rem;\n      border-bottom: 1px solid black;\n      border-right: 1px solid black;\n      :last-child {\n        border-right: 0;\n      }\n    }\n  }\n`; // Define a default UI for filtering\n\n_c = Styles;\n\nfunction GlobalFilter({\n  preGlobalFilteredRows,\n  globalFilter,\n  setGlobalFilter\n}) {\n  _s();\n\n  const count = preGlobalFilteredRows.length;\n  const [value, setValue] = React.useState(globalFilter);\n  const onChange = useAsyncDebounce(value => {\n    setGlobalFilter(value || undefined);\n  }, 200);\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    children: [\"Search:\", \" \", /*#__PURE__*/_jsxDEV(\"input\", {\n      value: value || \"\",\n      onChange: e => {\n        setValue(e.target.value);\n        onChange(e.target.value);\n      },\n      placeholder: `${count} records...`,\n      style: {\n        fontSize: \"1.1rem\",\n        border: \"0\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n} // Define a default UI for filtering\n\n\n_s(GlobalFilter, \"u76gItWTPW4jhTYSCcNG7/LfbyA=\", false, function () {\n  return [useAsyncDebounce];\n});\n\n_c2 = GlobalFilter;\n\nfunction DefaultColumnFilter({\n  column: {\n    filterValue,\n    preFilteredRows,\n    setFilter\n  }\n}) {\n  const count = preFilteredRows.length;\n  return /*#__PURE__*/_jsxDEV(\"input\", {\n    value: filterValue || \"\",\n    onChange: e => {\n      setFilter(e.target.value || undefined); // Set undefined to remove the filter entirely\n    },\n    placeholder: `Search ${count} records...`\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n} // This is a custom filter UI for selecting\n// a unique option from a list\n\n\n_c3 = DefaultColumnFilter;\n\nfunction SelectColumnFilter({\n  column: {\n    filterValue,\n    setFilter,\n    preFilteredRows,\n    id\n  }\n}) {\n  _s2();\n\n  // Calculate the options for filtering\n  // using the preFilteredRows\n  const options = React.useMemo(() => {\n    const options = new Set();\n    preFilteredRows.forEach(row => {\n      options.add(row.values[id]);\n    });\n    return [...options.values()];\n  }, [id, preFilteredRows]); // Render a multi-select box\n\n  return /*#__PURE__*/_jsxDEV(\"select\", {\n    value: filterValue,\n    onChange: e => {\n      setFilter(e.target.value || undefined);\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"option\", {\n      value: \"\",\n      children: \"All\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), options.map((option, i) => /*#__PURE__*/_jsxDEV(\"option\", {\n      value: option,\n      children: option\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n} // This is a custom filter UI that uses a\n// slider to set the filter value between a column's\n// min and max values\n\n\n_s2(SelectColumnFilter, \"UfleS4trXWGxzhzYTKqqYygmjCE=\");\n\n_c4 = SelectColumnFilter;\n\nfunction SliderColumnFilter({\n  column: {\n    filterValue,\n    setFilter,\n    preFilteredRows,\n    id\n  }\n}) {\n  _s3();\n\n  // Calculate the min and max\n  // using the preFilteredRows\n  const [min, max] = React.useMemo(() => {\n    let min = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\n    let max = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\n    preFilteredRows.forEach(row => {\n      min = Math.min(row.values[id], min);\n      max = Math.max(row.values[id], max);\n    });\n    return [min, max];\n  }, [id, preFilteredRows]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"range\",\n      min: min,\n      max: max,\n      value: filterValue || min,\n      onChange: e => {\n        setFilter(parseInt(e.target.value, 10));\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setFilter(undefined),\n      children: \"Off\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n} // This is a custom UI for our 'between' or number range\n// filter. It uses two number boxes and filters rows to\n// ones that have values between the two\n\n\n_s3(SliderColumnFilter, \"JjGt0968bxIn2DIWJAwn7XKKSys=\");\n\n_c5 = SliderColumnFilter;\n\nfunction NumberRangeColumnFilter({\n  column: {\n    filterValue = [],\n    preFilteredRows,\n    setFilter,\n    id\n  }\n}) {\n  _s4();\n\n  const [min, max] = React.useMemo(() => {\n    let min = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\n    let max = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\n    preFilteredRows.forEach(row => {\n      min = Math.min(row.values[id], min);\n      max = Math.max(row.values[id], max);\n    });\n    return [min, max];\n  }, [id, preFilteredRows]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      value: filterValue[0] || \"\",\n      type: \"number\",\n      onChange: e => {\n        const val = e.target.value;\n        setFilter((old = []) => [val ? parseInt(val, 10) : undefined, old[1]]);\n      },\n      placeholder: `Min (${min})`,\n      style: {\n        width: \"70px\",\n        marginRight: \"0.5rem\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }, this), \"to\", /*#__PURE__*/_jsxDEV(\"input\", {\n      value: filterValue[1] || \"\",\n      type: \"number\",\n      onChange: e => {\n        const val = e.target.value;\n        setFilter((old = []) => [old[0], val ? parseInt(val, 10) : undefined]);\n      },\n      placeholder: `Max (${max})`,\n      style: {\n        width: \"70px\",\n        marginLeft: \"0.5rem\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 169,\n    columnNumber: 5\n  }, this);\n} // Let the table remove the filter if the string is empty\n\n\n_s4(NumberRangeColumnFilter, \"JjGt0968bxIn2DIWJAwn7XKKSys=\");\n\n_c6 = NumberRangeColumnFilter;\n\nfuzzyTextFilterFn.autoRemove = val => !val; // Our table component\n\n\nfunction Table({\n  columns,\n  data\n}) {\n  _s5();\n\n  const filterTypes = React.useMemo(() => ({\n    // Add a new fuzzyTextFilterFn filter type.\n    fuzzyText: fuzzyTextFilterFn,\n    // Or, override the default text filter to use\n    // \"startWith\"\n    text: (rows, id, filterValue) => {\n      return rows.filter(row => {\n        const rowValue = row.values[id];\n        return rowValue !== undefined ? String(rowValue).toLowerCase().startsWith(String(filterValue).toLowerCase()) : true;\n      });\n    }\n  }), []);\n  const defaultColumn = React.useMemo(() => ({\n    // Let's set up our default Filter UI\n    Filter: DefaultColumnFilter\n  }), []);\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    state,\n    visibleColumns,\n    preGlobalFilteredRows,\n    setGlobalFilter\n  } = useTable({\n    columns,\n    data,\n    defaultColumn,\n    // Be sure to pass the defaultColumn option\n    filterTypes\n  }, useFilters, // useFilters!\n  useGlobalFilter // useGlobalFilter!\n  ); // We don't want to render all of the rows for this example, so cap\n  // it for this use case\n\n  const firstPageRows = rows.slice(0, 10);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"table\", { ...getTableProps(),\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: [headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", { ...headerGroup.getHeaderGroupProps(),\n          children: headerGroup.headers.map(column => /*#__PURE__*/_jsxDEV(\"th\", { ...column.getHeaderProps(),\n            children: [column.render(\"Header\"), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: column.canFilter ? column.render(\"Filter\") : null\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 279,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 276,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: /*#__PURE__*/_jsxDEV(\"th\", {\n            colSpan: visibleColumns.length,\n            style: {\n              textAlign: \"left\"\n            },\n            children: /*#__PURE__*/_jsxDEV(GlobalFilter, {\n              preGlobalFilteredRows: preGlobalFilteredRows,\n              globalFilter: state.globalFilter,\n              setGlobalFilter: setGlobalFilter\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 291,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 285,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", { ...getTableBodyProps(),\n        children: firstPageRows.map((row, i) => {\n          prepareRow(row);\n          return /*#__PURE__*/_jsxDEV(\"tr\", { ...row.getRowProps(),\n            children: row.cells.map(cell => {\n              return /*#__PURE__*/_jsxDEV(\"td\", { ...cell.getCellProps(),\n                children: cell.render(\"Cell\")\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 306,\n                columnNumber: 21\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 303,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Showing the first 20 results of \", rows.length, \" rows\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: /*#__PURE__*/_jsxDEV(\"code\", {\n          children: JSON.stringify(state.filters, null, 2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n} // Define a custom filter filter function!\n\n\n_s5(Table, \"rWN+gVhT0kYSLxE7UaMFym1MII0=\", false, function () {\n  return [useTable];\n});\n\n_c7 = Table;\n\nfunction filterGreaterThan(rows, id, filterValue) {\n  return rows.filter(row => {\n    const rowValue = row.values[id];\n    return rowValue >= filterValue;\n  });\n} // This is an autoRemove method on the filter function that\n// when given the new filter value and returns true, the filter\n// will be automatically removed. Normally this is just an undefined\n// check, but here, we want to remove the filter if it's not a number\n\n\nfilterGreaterThan.autoRemove = val => typeof val !== \"number\";\n\nfunction App() {\n  _s6();\n\n  const columns = React.useMemo(() => [{\n    Header: \"DATABASE\",\n    columns: [{\n      Header: \"Title\",\n      accessor: \"title\",\n      Filter: SliderColumnFilter,\n      filter: \"equals\"\n    }, {\n      Header: \"Author\",\n      accessor: \"author\",\n      Filter: NumberRangeColumnFilter,\n      filter: \"between\"\n    }, {\n      Header: \"SE Method\",\n      accessor: \"semethod\",\n      Filter: SelectColumnFilter,\n      filter: \"includes\"\n    }]\n  }], []);\n  const data = React.useMemo(() => makeData(100000), []);\n  return /*#__PURE__*/_jsxDEV(Styles, {\n    children: /*#__PURE__*/_jsxDEV(Table, {\n      columns: columns,\n      data: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 373,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 372,\n    columnNumber: 5\n  }, this);\n}\n\n_s6(App, \"7zObr1GywQUmP9L3sfy/4IDluAk=\");\n\n_c8 = App;\nexport default BasicTable;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8;\n\n$RefreshReg$(_c, \"Styles\");\n$RefreshReg$(_c2, \"GlobalFilter\");\n$RefreshReg$(_c3, \"DefaultColumnFilter\");\n$RefreshReg$(_c4, \"SelectColumnFilter\");\n$RefreshReg$(_c5, \"SliderColumnFilter\");\n$RefreshReg$(_c6, \"NumberRangeColumnFilter\");\n$RefreshReg$(_c7, \"Table\");\n$RefreshReg$(_c8, \"App\");","map":{"version":3,"sources":["/Users/joshstroud/Desktop/react/cise-seeds/seed-front-end/src/BasicTable.js"],"names":["React","styled","useTable","useFilters","useGlobalFilter","useAsyncDebounce","Styles","div","GlobalFilter","preGlobalFilteredRows","globalFilter","setGlobalFilter","count","length","value","setValue","useState","onChange","undefined","e","target","fontSize","border","DefaultColumnFilter","column","filterValue","preFilteredRows","setFilter","SelectColumnFilter","id","options","useMemo","Set","forEach","row","add","values","map","option","i","SliderColumnFilter","min","max","Math","parseInt","NumberRangeColumnFilter","display","val","old","width","marginRight","marginLeft","fuzzyTextFilterFn","autoRemove","Table","columns","data","filterTypes","fuzzyText","text","rows","filter","rowValue","String","toLowerCase","startsWith","defaultColumn","Filter","getTableProps","getTableBodyProps","headerGroups","prepareRow","state","visibleColumns","firstPageRows","slice","headerGroup","getHeaderGroupProps","headers","getHeaderProps","render","canFilter","textAlign","getRowProps","cells","cell","getCellProps","JSON","stringify","filters","filterGreaterThan","App","Header","accessor","makeData","BasicTable"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\nimport {\n  useTable,\n  useFilters,\n  useGlobalFilter,\n  useAsyncDebounce,\n} from \"react-table\";\n// A great library for fuzzy filtering/sorting items\n\nconst Styles = styled.div`\n  padding: 1rem;\n  table {\n    border-spacing: 0;\n    border: 1px solid black;\n    tr {\n      :last-child {\n        td {\n          border-bottom: 0;\n        }\n      }\n    }\n    th,\n    td {\n      margin: 0;\n      padding: 0.5rem;\n      border-bottom: 1px solid black;\n      border-right: 1px solid black;\n      :last-child {\n        border-right: 0;\n      }\n    }\n  }\n`;\n\n// Define a default UI for filtering\nfunction GlobalFilter({\n  preGlobalFilteredRows,\n  globalFilter,\n  setGlobalFilter,\n}) {\n  const count = preGlobalFilteredRows.length;\n  const [value, setValue] = React.useState(globalFilter);\n  const onChange = useAsyncDebounce((value) => {\n    setGlobalFilter(value || undefined);\n  }, 200);\n\n  return (\n    <span>\n      Search:{\" \"}\n      <input\n        value={value || \"\"}\n        onChange={(e) => {\n          setValue(e.target.value);\n          onChange(e.target.value);\n        }}\n        placeholder={`${count} records...`}\n        style={{\n          fontSize: \"1.1rem\",\n          border: \"0\",\n        }}\n      />\n    </span>\n  );\n}\n\n// Define a default UI for filtering\nfunction DefaultColumnFilter({\n  column: { filterValue, preFilteredRows, setFilter },\n}) {\n  const count = preFilteredRows.length;\n\n  return (\n    <input\n      value={filterValue || \"\"}\n      onChange={(e) => {\n        setFilter(e.target.value || undefined); // Set undefined to remove the filter entirely\n      }}\n      placeholder={`Search ${count} records...`}\n    />\n  );\n}\n\n// This is a custom filter UI for selecting\n// a unique option from a list\nfunction SelectColumnFilter({\n  column: { filterValue, setFilter, preFilteredRows, id },\n}) {\n  // Calculate the options for filtering\n  // using the preFilteredRows\n  const options = React.useMemo(() => {\n    const options = new Set();\n    preFilteredRows.forEach((row) => {\n      options.add(row.values[id]);\n    });\n    return [...options.values()];\n  }, [id, preFilteredRows]);\n\n  // Render a multi-select box\n  return (\n    <select\n      value={filterValue}\n      onChange={(e) => {\n        setFilter(e.target.value || undefined);\n      }}\n    >\n      <option value=\"\">All</option>\n      {options.map((option, i) => (\n        <option key={i} value={option}>\n          {option}\n        </option>\n      ))}\n    </select>\n  );\n}\n\n// This is a custom filter UI that uses a\n// slider to set the filter value between a column's\n// min and max values\nfunction SliderColumnFilter({\n  column: { filterValue, setFilter, preFilteredRows, id },\n}) {\n  // Calculate the min and max\n  // using the preFilteredRows\n\n  const [min, max] = React.useMemo(() => {\n    let min = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\n    let max = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\n    preFilteredRows.forEach((row) => {\n      min = Math.min(row.values[id], min);\n      max = Math.max(row.values[id], max);\n    });\n    return [min, max];\n  }, [id, preFilteredRows]);\n\n  return (\n    <>\n      <input\n        type=\"range\"\n        min={min}\n        max={max}\n        value={filterValue || min}\n        onChange={(e) => {\n          setFilter(parseInt(e.target.value, 10));\n        }}\n      />\n      <button onClick={() => setFilter(undefined)}>Off</button>\n    </>\n  );\n}\n\n// This is a custom UI for our 'between' or number range\n// filter. It uses two number boxes and filters rows to\n// ones that have values between the two\nfunction NumberRangeColumnFilter({\n  column: { filterValue = [], preFilteredRows, setFilter, id },\n}) {\n  const [min, max] = React.useMemo(() => {\n    let min = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\n    let max = preFilteredRows.length ? preFilteredRows[0].values[id] : 0;\n    preFilteredRows.forEach((row) => {\n      min = Math.min(row.values[id], min);\n      max = Math.max(row.values[id], max);\n    });\n    return [min, max];\n  }, [id, preFilteredRows]);\n\n  return (\n    <div\n      style={{\n        display: \"flex\",\n      }}\n    >\n      <input\n        value={filterValue[0] || \"\"}\n        type=\"number\"\n        onChange={(e) => {\n          const val = e.target.value;\n          setFilter((old = []) => [\n            val ? parseInt(val, 10) : undefined,\n            old[1],\n          ]);\n        }}\n        placeholder={`Min (${min})`}\n        style={{\n          width: \"70px\",\n          marginRight: \"0.5rem\",\n        }}\n      />\n      to\n      <input\n        value={filterValue[1] || \"\"}\n        type=\"number\"\n        onChange={(e) => {\n          const val = e.target.value;\n          setFilter((old = []) => [\n            old[0],\n            val ? parseInt(val, 10) : undefined,\n          ]);\n        }}\n        placeholder={`Max (${max})`}\n        style={{\n          width: \"70px\",\n          marginLeft: \"0.5rem\",\n        }}\n      />\n    </div>\n  );\n}\n\n// Let the table remove the filter if the string is empty\nfuzzyTextFilterFn.autoRemove = (val) => !val;\n\n// Our table component\nfunction Table({ columns, data }) {\n  const filterTypes = React.useMemo(\n    () => ({\n      // Add a new fuzzyTextFilterFn filter type.\n      fuzzyText: fuzzyTextFilterFn,\n      // Or, override the default text filter to use\n      // \"startWith\"\n      text: (rows, id, filterValue) => {\n        return rows.filter((row) => {\n          const rowValue = row.values[id];\n          return rowValue !== undefined\n            ? String(rowValue)\n                .toLowerCase()\n                .startsWith(String(filterValue).toLowerCase())\n            : true;\n        });\n      },\n    }),\n    []\n  );\n\n  const defaultColumn = React.useMemo(\n    () => ({\n      // Let's set up our default Filter UI\n      Filter: DefaultColumnFilter,\n    }),\n    []\n  );\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    state,\n    visibleColumns,\n    preGlobalFilteredRows,\n    setGlobalFilter,\n  } = useTable(\n    {\n      columns,\n      data,\n      defaultColumn, // Be sure to pass the defaultColumn option\n      filterTypes,\n    },\n    useFilters, // useFilters!\n    useGlobalFilter // useGlobalFilter!\n  );\n\n  // We don't want to render all of the rows for this example, so cap\n  // it for this use case\n  const firstPageRows = rows.slice(0, 10);\n\n  return (\n    <>\n      <table {...getTableProps()}>\n        <thead>\n          {headerGroups.map((headerGroup) => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map((column) => (\n                <th {...column.getHeaderProps()}>\n                  {column.render(\"Header\")}\n                  {/* Render the columns filter UI */}\n                  <div>{column.canFilter ? column.render(\"Filter\") : null}</div>\n                </th>\n              ))}\n            </tr>\n          ))}\n          <tr>\n            <th\n              colSpan={visibleColumns.length}\n              style={{\n                textAlign: \"left\",\n              }}\n            >\n              <GlobalFilter\n                preGlobalFilteredRows={preGlobalFilteredRows}\n                globalFilter={state.globalFilter}\n                setGlobalFilter={setGlobalFilter}\n              />\n            </th>\n          </tr>\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {firstPageRows.map((row, i) => {\n            prepareRow(row);\n            return (\n              <tr {...row.getRowProps()}>\n                {row.cells.map((cell) => {\n                  return (\n                    <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>\n                  );\n                })}\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n      <br />\n      <div>Showing the first 20 results of {rows.length} rows</div>\n      <div>\n        <pre>\n          <code>{JSON.stringify(state.filters, null, 2)}</code>\n        </pre>\n      </div>\n    </>\n  );\n}\n\n// Define a custom filter filter function!\nfunction filterGreaterThan(rows, id, filterValue) {\n  return rows.filter((row) => {\n    const rowValue = row.values[id];\n    return rowValue >= filterValue;\n  });\n}\n\n// This is an autoRemove method on the filter function that\n// when given the new filter value and returns true, the filter\n// will be automatically removed. Normally this is just an undefined\n// check, but here, we want to remove the filter if it's not a number\nfilterGreaterThan.autoRemove = (val) => typeof val !== \"number\";\n\nfunction App() {\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: \"DATABASE\",\n        columns: [\n          {\n            Header: \"Title\",\n            accessor: \"title\",\n            Filter: SliderColumnFilter,\n            filter: \"equals\",\n          },\n          {\n            Header: \"Author\",\n            accessor: \"author\",\n            Filter: NumberRangeColumnFilter,\n            filter: \"between\",\n          },\n          {\n            Header: \"SE Method\",\n            accessor: \"semethod\",\n            Filter: SelectColumnFilter,\n            filter: \"includes\",\n          },\n        ],\n      },\n    ],\n    []\n  );\n\n  const data = React.useMemo(() => makeData(100000), []);\n\n  return (\n    <Styles>\n      <Table columns={columns} data={data} />\n    </Styles>\n  );\n}\n\nexport default BasicTable;\n"]},"metadata":{},"sourceType":"module"}